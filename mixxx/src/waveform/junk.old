OLDJUNK FROM WAVESUMMARY.CPP:


    /*
    i=0;j=0;
    long sum = 0, sum2=0;
    
    int collected = 0;
    while(i+1 < numSamples && j+1 < resultSamples) {
        
        if(collected == samplesPerPixel || i+3 >= numSamples || j+3 >= resultSamples) {
            if(collected != 0) {
                (*downsample)[j++] = (maxl >> 11);
                (*downsample)[j++] = (maxr >> 11);
                //(*downsample)[j++] = (maxl / scaley);
                //(*downsample)[j++] = (maxr / scaley);
                //(*downsample)[j++] = (SAMPLE)(sum / collected / scaley);
                //(*downsample)[j++] = (SAMPLE)(sum2 / collected / scaley);
            }
            sum = 0;
            sum2 = 0;
            maxl = maxr = 0;
            collected = 0;
        }

        SAMPLE sl = abs(data[i++]);
        SAMPLE sr = abs(data[i++]);

        if(sl > maxl)
            maxl = sl;
        if(sr > maxr)
            maxr = sr;

        //sum += abs(data[i++]);
        //sum2 += abs(data[i++]);
        collected++;
    }*/





SKIPPPP







    /***     FAILED TRY **/
    // Allocate temp buffer
    SAMPLE *pBuff = NULL;

    
    long liPos;


    qDebug() << "Beginning VisualWaveform generation for " << pTrackInfoObject->getFilename();
    // The number of seconds per pixel.
    double dSecondsPerPixel = pTrackInfoObject->getVisualResampleRate();

    int iSamplesPerPixel = int(ceilf(dSecondsPerPixel * pSoundSource->getSrate()));
    int verticalScale = pTrackInfoObject->getVisualVerticalScale();

    int buflen = iSamplesPerPixel*2; // store 2 samples per pixel
    pBuff = new SAMPLE[buflen*2];
            
    for(i=0;i<buflen;i++) {
        pBuff[i] = 0;
    }

    
    liPos = pSoundSource->seek(0);
    liPos += pSoundSource->read(buflen, pBuff);

    // Length of file in samples
    long liLengthSamples = pSoundSource->length();
    int liLengthBuffer = int(ceilf(double(liLengthSamples)/iSamplesPerPixel));
    if(liLengthBuffer % 2 != 0)
        liLengthBuffer++;
    QVector<float> *pVisual = new QVector<float>(liLengthBuffer);
    float* pData = pVisual->data();
    qDebug() << "VisualWaveformGen -- Using temp buffer size of " << buflen << " and an waveform buffer size of " << liLengthBuffer << " actual length:" << pVisual->size();
            
            
    i = j = 0;
    //int maxl=0, maxr=0;
    //int minl=32767,minr=32767;
    while(liPos < liLengthSamples && i+1< liLengthBuffer) {
        maxl=maxr=0;
                
        for(j=0;j+1<buflen;j+=2) {
            SAMPLE ls = abs(pBuff[j]);
            SAMPLE rs = abs(pBuff[j+1]);
                    
            if(ls > maxl) {
                maxl = ls;
            }
            if(rs > maxr) {
                maxr = rs;
            }
        }

        
        Q_ASSERT(i<pVisual->size());
        pData[i] = maxl / verticalScale;
        i++;

        Q_ASSERT(i<pVisual->size());
        pData[i] = maxr / verticalScale;
        i++;
                
        liPos += pSoundSource->read(buflen, pBuff);
    }
    
    qDebug() << "HERE!";

    pTrackInfoObject->setVisualWaveform(pVisual);
    
    qDebug() << "VisualWaveform generation successful for " << pTrackInfoObject->getFilename();


    delete [] pBuff;
    delete pSoundSource;







JUNK FROM WAVERENDERER


    m_sampleBuffer = QVector<SAMPLE>(0);
    m_iNumSamples = 0;
    
    SoundSourceProxy *pSoundSource = new SoundSourceProxy(pTrack);
    int i,j;
    const int kiBlockSize = 2048;
    // A stereo sample buffer, kiBlockSize long with 2 samples per channel
    SAMPLE *pBuffer = new SAMPLE[kiBlockSize*2];
    int numSamples = pSoundSource->length();


    QVector<SAMPLE> data(numSamples);

    for(i=0;i<data.size();i++) {
        data[i] = 0;
    }

    int filePos = 0;

    filePos = pSoundSource->seek(0);
    filePos += pSoundSource->read(kiBlockSize, pBuffer);

    j=0;
    while(filePos < numSamples) {
        for(i=0;i<kiBlockSize;i++) {
            if(pBuffer[i] > m_iMax)
                m_iMax = pBuffer[i];
            if(pBuffer[i] < m_iMin)
                m_iMin = pBuffer[i];
            data[j++] = pBuffer[i];
        }
        filePos += pSoundSource->read(kiBlockSize, pBuffer);
    }

    // Now downsample the waveform.
    // If we have s samples @ 44100 Hz, and we want to
    // display 4 seconds in 400 pixels of data.

    // 4 seconds * 44100 Hz = numsamples to display in a frame, z
    // width pixels, z samples, z / width = num pixels to merge into 1

    int desiredSecondsToDisplay = m_iDesiredSecondsToDisplay;
    int sampleRate = pSoundSource->getSrate();

    int z = desiredSecondsToDisplay * sampleRate;

    if(m_iWidth != 0) {
        z += (z % m_iWidth);
    }
    int samplesPerPixel = z / m_iWidth;

    int curSamples = numSamples + ((numSamples) % samplesPerPixel);
    
    int resultSamples = curSamples / samplesPerPixel;

    // We need both channels
    if(resultSamples % 2 != 0)
        resultSamples++;

    QVector<SAMPLE> downsample(resultSamples);

    qDebug() << "Samples per pixel: " << samplesPerPixel << " Goal samples " << resultSamples << " from " << numSamples;

    int scaley = 32767*2/ m_iHeight;

    i=0;j=0;
    long sum = 0, sum2=0;
    int collected = 0;
    while(i+1 < numSamples && j+1 < resultSamples) {
        if(collected == samplesPerPixel || i+3 >= numSamples || j+3 >= resultSamples) {
            if(collected != 0) {
                downsample[j++] = (SAMPLE)(sum / collected / scaley);
                downsample[j++] = (SAMPLE)(sum2 / collected / scaley);
            }
            sum = 0;
            sum2 = 0;
            collected = 0;
        }
        sum += abs(data[i++]);
        sum2 += abs(data[i++]);
        collected++;
    }

    /*
    // Now generate a pixmap of this
    QImage *pm = new QImage(resultSamples/2, m_iHeight, QImage::Format_RGB32);
    QPainter paint;
    paint.begin(pm);

    qDebug() << "Wave Precomp: BG: " << bgColor << " FG:" << signalColor;
    paint.fillRect(pm->rect(), QBrush(bgColor));//QColor(0,0,0)));
    paint.setPen(signalColor);//QColor(0,255,0));

    
    paint.translate(0,m_iHeight/2);
    paint.scale(1.0,-1.0);
    //paint.drawLine(QLine(0,0,resultSamples/2,0));
    
    for(i=0;i<resultSamples/2;i++) {
        SAMPLE sampl = downsample[i*2];
        SAMPLE sampr = downsample[i*2+1];

        //paint.drawLine(QLine(i,-15, i, 15));
        //paint.drawLine(QLine(i,-sampr,i,sampl));
    }
    paint.end();
    */

    
    //pm->save("/home/rryan/foo.bmp", "BMP", 100);

    m_sampleBuffer = downsample;
    m_iNumSamples = resultSamples;

    //m_pPixmap = pm;
    
    delete [] pBuffer;
    delete pSoundSource;
    
    qDebug() << "Done reading samples from file. Max:" << m_iMax << " Min: " << m_iMin;   
    