// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/beats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace mixxx {
namespace track {
namespace io {

void protobuf_ShutdownFile_proto_2fbeats_2eproto() {
  delete Beat::default_instance_;
  delete Bpm::default_instance_;
  delete BeatMap::default_instance_;
  delete BeatGrid::default_instance_;
}

void protobuf_AddDesc_proto_2fbeats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Beat::default_instance_ = new Beat();
  Bpm::default_instance_ = new Bpm();
  BeatMap::default_instance_ = new BeatMap();
  BeatGrid::default_instance_ = new BeatGrid();
  Beat::default_instance_->InitAsDefaultInstance();
  Bpm::default_instance_->InitAsDefaultInstance();
  BeatMap::default_instance_->InitAsDefaultInstance();
  BeatGrid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fbeats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fbeats_2eproto {
  StaticDescriptorInitializer_proto_2fbeats_2eproto() {
    protobuf_AddDesc_proto_2fbeats_2eproto();
  }
} static_descriptor_initializer_proto_2fbeats_2eproto_;

bool Source_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Beat::kFramePositionFieldNumber;
const int Beat::kEnabledFieldNumber;
const int Beat::kSourceFieldNumber;
#endif  // !_MSC_VER

Beat::Beat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Beat::InitAsDefaultInstance() {
}

Beat::Beat(const Beat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Beat::SharedCtor() {
  _cached_size_ = 0;
  frame_position_ = 0;
  enabled_ = true;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Beat::~Beat() {
  SharedDtor();
}

void Beat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Beat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Beat& Beat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fbeats_2eproto();  return *default_instance_;
}

Beat* Beat::default_instance_ = NULL;

Beat* Beat::New() const {
  return new Beat;
}

void Beat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_position_ = 0;
    enabled_ = true;
    source_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Beat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_position_)));
          set_has_frame_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }
      
      // optional bool enabled = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }
      
      // optional .mixxx.track.io.Source source = 3 [default = ANALYSER];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (mixxx::track::io::Source_IsValid(value)) {
            set_source(static_cast< mixxx::track::io::Source >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Beat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 frame_position = 1;
  if (has_frame_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_position(), output);
  }
  
  // optional bool enabled = 2 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }
  
  // optional .mixxx.track.io.Source source = 3 [default = ANALYSER];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }
  
}

int Beat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 frame_position = 1;
    if (has_frame_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_position());
    }
    
    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional .mixxx.track.io.Source source = 3 [default = ANALYSER];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Beat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Beat*>(&from));
}

void Beat::MergeFrom(const Beat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_position()) {
      set_frame_position(from.frame_position());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
}

void Beat::CopyFrom(const Beat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beat::IsInitialized() const {
  
  return true;
}

void Beat::Swap(Beat* other) {
  if (other != this) {
    std::swap(frame_position_, other->frame_position_);
    std::swap(enabled_, other->enabled_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Beat::GetTypeName() const {
  return "mixxx.track.io.Beat";
}


// ===================================================================

#ifndef _MSC_VER
const int Bpm::kBpmFieldNumber;
const int Bpm::kSourceFieldNumber;
#endif  // !_MSC_VER

Bpm::Bpm()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Bpm::InitAsDefaultInstance() {
}

Bpm::Bpm(const Bpm& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Bpm::SharedCtor() {
  _cached_size_ = 0;
  bpm_ = 0;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bpm::~Bpm() {
  SharedDtor();
}

void Bpm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bpm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bpm& Bpm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fbeats_2eproto();  return *default_instance_;
}

Bpm* Bpm::default_instance_ = NULL;

Bpm* Bpm::New() const {
  return new Bpm;
}

void Bpm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bpm_ = 0;
    source_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Bpm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bpm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bpm_)));
          set_has_bpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source;
        break;
      }
      
      // optional .mixxx.track.io.Source source = 2 [default = ANALYSER];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (mixxx::track::io::Source_IsValid(value)) {
            set_source(static_cast< mixxx::track::io::Source >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bpm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double bpm = 1;
  if (has_bpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bpm(), output);
  }
  
  // optional .mixxx.track.io.Source source = 2 [default = ANALYSER];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }
  
}

int Bpm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double bpm = 1;
    if (has_bpm()) {
      total_size += 1 + 8;
    }
    
    // optional .mixxx.track.io.Source source = 2 [default = ANALYSER];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bpm::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bpm*>(&from));
}

void Bpm::MergeFrom(const Bpm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bpm()) {
      set_bpm(from.bpm());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
}

void Bpm::CopyFrom(const Bpm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bpm::IsInitialized() const {
  
  return true;
}

void Bpm::Swap(Bpm* other) {
  if (other != this) {
    std::swap(bpm_, other->bpm_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Bpm::GetTypeName() const {
  return "mixxx.track.io.Bpm";
}


// ===================================================================

#ifndef _MSC_VER
const int BeatMap::kBeatFieldNumber;
#endif  // !_MSC_VER

BeatMap::BeatMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BeatMap::InitAsDefaultInstance() {
}

BeatMap::BeatMap(const BeatMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BeatMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeatMap::~BeatMap() {
  SharedDtor();
}

void BeatMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeatMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeatMap& BeatMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fbeats_2eproto();  return *default_instance_;
}

BeatMap* BeatMap::default_instance_ = NULL;

BeatMap* BeatMap::New() const {
  return new BeatMap;
}

void BeatMap::Clear() {
  beat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BeatMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mixxx.track.io.Beat beat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeatMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mixxx.track.io.Beat beat = 1;
  for (int i = 0; i < this->beat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->beat(i), output);
  }
  
}

int BeatMap::ByteSize() const {
  int total_size = 0;
  
  // repeated .mixxx.track.io.Beat beat = 1;
  total_size += 1 * this->beat_size();
  for (int i = 0; i < this->beat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beat(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeatMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeatMap*>(&from));
}

void BeatMap::MergeFrom(const BeatMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  beat_.MergeFrom(from.beat_);
}

void BeatMap::CopyFrom(const BeatMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatMap::IsInitialized() const {
  
  return true;
}

void BeatMap::Swap(BeatMap* other) {
  if (other != this) {
    beat_.Swap(&other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeatMap::GetTypeName() const {
  return "mixxx.track.io.BeatMap";
}


// ===================================================================

#ifndef _MSC_VER
const int BeatGrid::kBpmFieldNumber;
const int BeatGrid::kFirstBeatFieldNumber;
#endif  // !_MSC_VER

BeatGrid::BeatGrid()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BeatGrid::InitAsDefaultInstance() {
  bpm_ = const_cast< ::mixxx::track::io::Bpm*>(&::mixxx::track::io::Bpm::default_instance());
  first_beat_ = const_cast< ::mixxx::track::io::Beat*>(&::mixxx::track::io::Beat::default_instance());
}

BeatGrid::BeatGrid(const BeatGrid& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BeatGrid::SharedCtor() {
  _cached_size_ = 0;
  bpm_ = NULL;
  first_beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeatGrid::~BeatGrid() {
  SharedDtor();
}

void BeatGrid::SharedDtor() {
  if (this != default_instance_) {
    delete bpm_;
    delete first_beat_;
  }
}

void BeatGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeatGrid& BeatGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fbeats_2eproto();  return *default_instance_;
}

BeatGrid* BeatGrid::default_instance_ = NULL;

BeatGrid* BeatGrid::New() const {
  return new BeatGrid;
}

void BeatGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bpm()) {
      if (bpm_ != NULL) bpm_->::mixxx::track::io::Bpm::Clear();
    }
    if (has_first_beat()) {
      if (first_beat_ != NULL) first_beat_->::mixxx::track::io::Beat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BeatGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mixxx.track.io.Bpm bpm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bpm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_first_beat;
        break;
      }
      
      // optional .mixxx.track.io.Beat first_beat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeatGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mixxx.track.io.Bpm bpm = 1;
  if (has_bpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bpm(), output);
  }
  
  // optional .mixxx.track.io.Beat first_beat = 2;
  if (has_first_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->first_beat(), output);
  }
  
}

int BeatGrid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mixxx.track.io.Bpm bpm = 1;
    if (has_bpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bpm());
    }
    
    // optional .mixxx.track.io.Beat first_beat = 2;
    if (has_first_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_beat());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeatGrid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeatGrid*>(&from));
}

void BeatGrid::MergeFrom(const BeatGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bpm()) {
      mutable_bpm()->::mixxx::track::io::Bpm::MergeFrom(from.bpm());
    }
    if (from.has_first_beat()) {
      mutable_first_beat()->::mixxx::track::io::Beat::MergeFrom(from.first_beat());
    }
  }
}

void BeatGrid::CopyFrom(const BeatGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatGrid::IsInitialized() const {
  
  return true;
}

void BeatGrid::Swap(BeatGrid* other) {
  if (other != this) {
    std::swap(bpm_, other->bpm_);
    std::swap(first_beat_, other->first_beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeatGrid::GetTypeName() const {
  return "mixxx.track.io.BeatGrid";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace track
}  // namespace mixxx

// @@protoc_insertion_point(global_scope)
