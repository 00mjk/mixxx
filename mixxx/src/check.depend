
#************************************************************************
# Qmake deps script
# version 0.4
# Copyright (c) 2003 Gianluca Romanin ( J_Zar )  <jayorama@users.sourceforge.net>
#************************************************************************


#************************************************************************
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#************************************************************************




# ---------------------------standard check ------------------------------------
FOUND = false
MESSAGE = "Checking for $${OBJ_TO_TEST} ...............
ERROR_MESSAGE = "Cannot compile without $${OBJ_TO_TEST}!"

# checking with defaults
contains( OBJ_TYPE, lib ) {
# if we have a library

# At first ----> check using LD
!isEmpty( LIBS_TO_LINK ) {
	system( ld $${LIBS_TO_LINK} 2>/dev/null ) {
		MESSAGE += yes"
		message( $${MESSAGE} )
		FOUND = true
	}
}
# If this fails ----> check the file existence
contains( FOUND, false) {
	exists( $${LIB_BASE0}/$${OBJ_TO_TEST}* ) {
		MESSAGE += yes"
		message( $${MESSAGE} )
		FOUND = true
	} else {
		exists( $${LIB_BASE1}/$${OBJ_TO_TEST}* ) {
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
		}
		} else {
			exists( $${LIB_BASE2}/$${OBJ_TO_TEST}* ) {
				MESSAGE += yes"
				message( $${MESSAGE} )
				FOUND = true
			}
		}
}
}

contains( OBJ_TYPE, bin ) {
# if we have a binary
exists( $${BIN_BASE0}/$${OBJ_TO_TEST}* ) {
	MESSAGE += yes"
	message( $${MESSAGE} )
	FOUND = true
} else {
	exists( $${BIN_BASE1}/$${OBJ_TO_TEST}* ) {
		MESSAGE += yes"
		message( $${MESSAGE} )
		FOUND = true
	}
}
}


contains( OBJ_TYPE, other ) {
# if we have other stuff
exists( $${OPTIONAL_BASE0}/$${OBJ_TO_TEST}* ) {
	MESSAGE += yes"
	message( $${MESSAGE} )
	FOUND = true
} else {
	exists( $${OPTIONAL_BASE1}/$${OBJ_TO_TEST}* ) {
		MESSAGE += yes"
		message( $${MESSAGE} )
		FOUND = true
	} else {
			exists( $${OPTIONAL_BASE2}/$${OBJ_TO_TEST}* ) {
				MESSAGE += yes"
				message( $${MESSAGE} )
				FOUND = true
			}
		}
}
}

# ATTENTION: if at this point a library is not found, the problem could be that its path
# is not correctly inserted in "ld.so.conf"... The programmer has the duty of warn the user...

# if not found check with user-added paths
# This code is not much sharp... Dirty hack...
contains( FOUND, false) {
		!isEmpty( PATH1 ) {
			exists( $$PATH1/$${OBJ_TO_TEST}* ){
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
			}
		}
		!isEmpty( PATH2 ) {
			exists( $$PATH2/$${OBJ_TO_TEST}* ){
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
			}
		}
		!isEmpty( PATH3 ) {
			exists( $$PATH3/$${OBJ_TO_TEST}* ){
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
			}
		}
		!isEmpty( PATH4 ) {
			exists( $$PATH4/$${OBJ_TO_TEST}* ){
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
			}
		}
		!isEmpty( PATH5 ) {
			exists( $$PATH5/$${OBJ_TO_TEST}* ){
			MESSAGE += yes"
			message( $${MESSAGE} )
			FOUND = true
			}
		}
}


# Not found again? Nothing to do...
contains( FOUND, false) {
	MESSAGE += no"
	message( $${MESSAGE} )
	!isEmpty( TIP_MESSAGE_IF_NOT_FOUND ) {
		message( "**************************************" )
		message( $${TIP_MESSAGE_IF_NOT_FOUND} )
		message( "**************************************" )
	}
	contains( EXIT_IF_NOT_FOUND, true ) {
		message( "**************************************" )
		error( $${ERROR_MESSAGE} )
}
}


# --------------------------- actions ------------------------------------
# if found:
# Add something
contains( FOUND, true ) {
	contains( LINK_IF_FOUND, true) {
		LIBS += $${LIBS_TO_LINK}
		}
	DEFINES += $${DEFINES_TO_ADD}
	SOURCES += $${SOURCES_TO_ADD}
	HEADERS += $${HEADERS_TO_ADD}
	CONFIG += $${CONFIG_TO_ADD}
# Subtract something
	LIBS -= $${LIBS_TO_UNLINK}
	DEFINES -= $${DEFINES_TO_SUBTRACT}
	SOURCES -= $${SOURCES_TO_SUBTRACT}
	HEADERS -= $${HEADERS_TO_SUBTRACT}
	CONFIG -= $${CONFIG_TO_SUBTRACT}
}

