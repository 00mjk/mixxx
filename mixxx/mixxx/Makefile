# Generated automatically from Makefile.in by configure.
# KDE tags expanded automatically by am_edit - $Revision: 7 $ 
# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

####### kdevelop will overwrite this part!!! (begin)##########


SHELL = /bin/sh

srcdir = .
top_srcdir = ..
prefix = /usr/local
exec_prefix = ${prefix}
#>- 
bindir = ${exec_prefix}/bin
#>+ 3
DEPDIR = .deps

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/mixxx
pkglibdir = $(libdir)/mixxx
pkgincludedir = $(includedir)/mixxx

top_builddir = ..

ACLOCAL = aclocal
AUTOCONF = autoconf
AUTOMAKE = automake
AUTOHEADER = autoheader

INSTALL = /usr/bin/install -c -p
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG) $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = i686-pc-linux-gnu
build_triplet = i686-pc-linux-gnu
host_alias = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_alias = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ARTSCCONFIG = @ARTSCCONFIG@
AS = @AS@
AUTODIRS = @AUTODIRS@
CC = gcc
CONF_FILES = @CONF_FILES@
CPP = gcc -E
CXX = c++
CXXCPP = c++ -E
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DLLTOOL = @DLLTOOL@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
EXEEXT = 
GCJ = @GCJ@
GCJFLAGS = @GCJFLAGS@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = /usr/bin/msgfmt
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
JAR = @JAR@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JVMLIBS = @JVMLIBS@
KDECONFIG = @KDECONFIG@
KDE_CXXFLAGS = 
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS =  -DPIC -fPIC -lpthread
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = #
KDE_USE_CLOSURE_TRUE = 
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGEN = @LIBGEN@
LIBJPEG = -ljpeg
LIBMICO = @LIBMICO@
LIBOBJS = @LIBOBJS@
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBRESOLV = -lresolv
LIBSHADOW = @LIBSHADOW@
LIBSM = -lSM -lICE
LIBSOCKET =  -lresolv
LIBTIFF = @LIBTIFF@
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBUCB = 
LIBUTIL = -lutil
LIBXINERAMA = 
LIBZ = -lz
LIB_KAB = @LIB_KAB@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEUI = @LIB_KDEUI@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = @LIB_KIO@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KWRITE = @LIB_KWRITE@
LIB_QT = -lqt-mt $(LIBPNG) $(LIBJPEG) -lXext $(LIB_X11) $(LIBSM)
LIB_SMB = @LIB_SMB@
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LN_S = ln -s
MAKEINFO = makeinfo
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = /usr/lib/qt2//bin/moc
MSGFMT = /usr/bin/msgfmt
NOOPT_CXXFLAGS =  -g3 -Wall -fno-exceptions -fno-check-new
NOREPO = -fno-repo
OBJDUMP = @OBJDUMP@
OBJEXT = o
PACKAGE = mixxx
PAMLIBS = @PAMLIBS@
PASSWDLIBS = @PASSWDLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QTE_NORTTI = 
QT_INCLUDES = -I/usr/lib/qt2//include
QT_LDFLAGS = -L/usr/lib/qt2//lib
RANLIB = ranlib
REPO = -frepo
SETUIDFLAGS = @SETUIDFLAGS@
STRIP = strip
TOPSUBDIRS =  mixxx
UIC = /usr/lib/qt2//bin/uic
UIC_TR = i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS =  -DPIC -fPIC
VERSION = 0.1
XGETTEXT = /usr/bin/xgettext
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS =  -lresolv
X_INCLUDES = -I/usr/X11R6/include
X_LDFLAGS = -L/usr/X11R6/lib
X_PRE_LIBS = 
all_includes = -I/usr/lib/qt2//include -I/usr/X11R6/include
all_libraries = -L/usr/X11R6/lib -L/usr/lib/qt2//lib  -DPIC -fPIC -lpthread
idldir = @idldir@
jni_includes = @jni_includes@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = 2
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
micodir = @micodir@
qt_includes = /usr/lib/qt2//include
qt_libraries = /usr/lib/qt2//lib
x_includes = /usr/X11R6/include
x_libraries = /usr/X11R6/lib

bin_PROGRAMS = mixxx
#>- mixxx_SOURCES = soundsourcenull.cpp dlgplaylist.cpp dlgplaylistdlg.ui enginepregain.cpp engineIIRfilter.cpp midiobject.cpp playerportaudio.cpp playeralsa.cpp controlpotmeter.cpp player.cpp enginebuffer.cpp controlpushbutton.cpp engineobject.cpp controlobject.cpp soundsource.cpp dlgplaycontrol.cpp dlgmessages.cpp dlgchannel.cpp dlgplaycontroldlg.ui dlgmessagesdlg.ui dlgchanneldlg.ui mixxxview.cpp mixxxdoc.cpp mixxx.cpp main.cpp 
#>+ 1
mixxx_SOURCES=soundsourcenull.cpp dlgplaylist.cpp  enginepregain.cpp engineIIRfilter.cpp midiobject.cpp playerportaudio.cpp playeralsa.cpp controlpotmeter.cpp player.cpp enginebuffer.cpp controlpushbutton.cpp engineobject.cpp controlobject.cpp soundsource.cpp dlgplaycontrol.cpp dlgmessages.cpp dlgchannel.cpp    mixxxview.cpp mixxxdoc.cpp mixxx.cpp main.cpp  dlgplaylistdlg.cpp dlgplaycontroldlg.cpp dlgmessagesdlg.cpp dlgchanneldlg.cpp
SOURCES = soundsourcenull.cpp dlgplaylist.cpp enginepregain.cpp engineIIRfilter.cpp midiobject.cpp playerportaudio.cpp playeralsa.cpp controlpotmeter.cpp player.cpp enginebuffer.cpp controlpushbutton.cpp engineobject.cpp controlobject.cpp soundsource.cpp dlgplaycontrol.cpp dlgmessages.cpp dlgchannel.cpp mixxxview.cpp mixxxdoc.cpp mixxx.cpp main.cpp 
INTERFACES = dlgplaylistdlg.ui dlgplaycontroldlg.ui dlgmessagesdlg.ui dlgchanneldlg.ui 
TRANSLATIONS = 
KDE_OPTIONS = qtonly
mixxx_LDADD = -laudiofile -lmad -lpthread -lasound -lportaudio $(LIB_QT) $(LIBSOCKET)

SUBDIRS = docs 

EXTRA_DIST = main.cpp mixxx.cpp mixxx.h mixxxdoc.cpp mixxxdoc.h mixxxview.cpp mixxxview.h lo32-app-mixxx.png lo16-app-mixxx.png filenew.xpm filesave.xpm fileopen.xpm dlgchanneldlg.ui dlgmessagesdlg.ui dlgplaycontroldlg.ui dlgchannel.cpp dlgchannel.h dlgmessages.cpp dlgmessages.h dlgplaycontrol.cpp dlgplaycontrol.h soundsource.cpp soundsource.h defs.h controlobject.cpp controlobject.h engineobject.cpp engineobject.h controlpushbutton.cpp controlpushbutton.h enginebuffer.cpp enginebuffer.h player.cpp player.h controlpotmeter.cpp controlpotmeter.h playeralsa.cpp playeralsa.h playerportaudio.cpp playerportaudio.h midiobject.h midiobject.cpp engineIIRfilter.cpp engineIIRfilter.h enginepregain.cpp enginepregain.h dlgplaylistdlg.ui dlgplaylist.h dlgplaylist.cpp soundsourcenull.cpp soundsourcenull.h 

####### kdevelop will overwrite this part!!! (end)############

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

#>- mixxx_METASOURCES = AUTO

# the library search path. 
mixxx_LDFLAGS = $(all_libraries) 

# them while "make clean", use CLEANFILES
DISTCLEANFILES = $(mixxx_METASOURCES)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
bin_PROGRAMS =  mixxx$(EXEEXT)
PROGRAMS =  $(bin_PROGRAMS)


DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I..
CPPFLAGS =  -DPIC -fPIC -DQT_THREAD_SUPPORT  -D_REENTRANT
LDFLAGS =   
LIBS = 
#>- mixxx_OBJECTS =  soundsourcenull.$(OBJEXT) dlgplaylist.$(OBJEXT) \
#>- enginepregain.$(OBJEXT) engineIIRfilter.$(OBJEXT) midiobject.$(OBJEXT) \
#>- playerportaudio.$(OBJEXT) playeralsa.$(OBJEXT) \
#>- controlpotmeter.$(OBJEXT) player.$(OBJEXT) enginebuffer.$(OBJEXT) \
#>- controlpushbutton.$(OBJEXT) engineobject.$(OBJEXT) \
#>- controlobject.$(OBJEXT) soundsource.$(OBJEXT) dlgplaycontrol.$(OBJEXT) \
#>- dlgmessages.$(OBJEXT) dlgchannel.$(OBJEXT) mixxxview.$(OBJEXT) \
#>- mixxxdoc.$(OBJEXT) mixxx.$(OBJEXT) main.$(OBJEXT)
#>+ 12
mixxx_final_OBJECTS = mixxx.all_cpp.o 
mixxx_nofinal_OBJECTS = soundsourcenull.$(OBJEXT) dlgplaylist.$(OBJEXT) \
enginepregain.$(OBJEXT) engineIIRfilter.$(OBJEXT) midiobject.$(OBJEXT) \
playerportaudio.$(OBJEXT) playeralsa.$(OBJEXT) \
controlpotmeter.$(OBJEXT) player.$(OBJEXT) enginebuffer.$(OBJEXT) \
controlpushbutton.$(OBJEXT) engineobject.$(OBJEXT) \
controlobject.$(OBJEXT) soundsource.$(OBJEXT) dlgplaycontrol.$(OBJEXT) \
dlgmessages.$(OBJEXT) dlgchannel.$(OBJEXT) mixxxview.$(OBJEXT) \
mixxxdoc.$(OBJEXT) mixxx.$(OBJEXT) main.$(OBJEXT) dlgplaylistdlg.$(OBJEXT) dlgplaycontroldlg.$(OBJEXT) dlgmessagesdlg.$(OBJEXT) dlgchanneldlg.$(OBJEXT)\
mixxxview.moc.o enginebuffer.moc.o controlpushbutton.moc.o enginepregain.moc.o dlgplaylist.moc.o dlgplaycontrol.moc.o mixxx.moc.o mixxxdoc.moc.o dlgmessages.moc.o controlobject.moc.o engineobject.moc.o dlgchannel.moc.o controlpotmeter.moc.o 
mixxx_OBJECTS = $(mixxx_nofinal_OBJECTS)
#mixxx_OBJECTS = $(mixxx_final_OBJECTS)
mixxx_DEPENDENCIES = 
CXXFLAGS = -O2 -O0 -g3 -Wall -fno-exceptions -fno-check-new
#>- CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@
#>+ 1
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  Makefile.am Makefile.in


#>- DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)
#>+ 4
KDE_DIST=test.wav 

DISTFILES= $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)


TAR = tar
GZIP_ENV = --best
#>- DEP_FILES =  .deps/controlobject.P .deps/controlpotmeter.P \
#>- .deps/controlpushbutton.P .deps/dlgchannel.P .deps/dlgmessages.P \
#>- .deps/dlgplaycontrol.P .deps/dlgplaylist.P .deps/engineIIRfilter.P \
#>- .deps/enginebuffer.P .deps/engineobject.P .deps/enginepregain.P \
#>- .deps/main.P .deps/midiobject.P .deps/mixxx.P .deps/mixxxdoc.P \
#>- .deps/mixxxview.P .deps/player.P .deps/playeralsa.P \
#>- .deps/playerportaudio.P .deps/soundsource.P .deps/soundsourcenull.P
#>+ 16
#DEP_FILES =  $(DEPDIR)/dlgplaylistdlg.P $(DEPDIR)/dlgplaycontroldlg.P $(DEPDIR)/dlgmessagesdlg.P $(DEPDIR)/dlgchanneldlg.P $(DEPDIR)/mixxxview.moc.P $(DEPDIR)/enginebuffer.moc.P $(DEPDIR)/controlpushbutton.moc.P $(DEPDIR)/enginepregain.moc.P $(DEPDIR)/dlgplaylist.moc.P $(DEPDIR)/dlgplaycontrol.moc.P $(DEPDIR)/mixxx.moc.P $(DEPDIR)/mixxxdoc.moc.P $(DEPDIR)/dlgmessages.moc.P $(DEPDIR)/controlobject.moc.P $(DEPDIR)/engineobject.moc.P $(DEPDIR)/dlgchannel.moc.P $(DEPDIR)/controlpotmeter.moc.P  $(DEPDIR)/mixxx.all_cpp.P \
	  .deps/controlobject.P .deps/controlpotmeter.P \
.deps/controlpushbutton.P .deps/dlgchannel.P .deps/dlgmessages.P \
.deps/dlgplaycontrol.P .deps/dlgplaylist.P .deps/engineIIRfilter.P \
.deps/enginebuffer.P .deps/engineobject.P .deps/enginepregain.P \
.deps/main.P .deps/midiobject.P .deps/mixxx.P .deps/mixxxdoc.P \
.deps/mixxxview.P .deps/player.P .deps/playeralsa.P \
.deps/playerportaudio.P .deps/soundsource.P .deps/soundsourcenull.P
DEP_FILES =  $(DEPDIR)/dlgplaylistdlg.P $(DEPDIR)/dlgplaycontroldlg.P $(DEPDIR)/dlgmessagesdlg.P $(DEPDIR)/dlgchanneldlg.P $(DEPDIR)/mixxxview.moc.P $(DEPDIR)/enginebuffer.moc.P $(DEPDIR)/controlpushbutton.moc.P $(DEPDIR)/enginepregain.moc.P $(DEPDIR)/dlgplaylist.moc.P $(DEPDIR)/dlgplaycontrol.moc.P $(DEPDIR)/mixxx.moc.P $(DEPDIR)/mixxxdoc.moc.P $(DEPDIR)/dlgmessages.moc.P $(DEPDIR)/controlobject.moc.P $(DEPDIR)/engineobject.moc.P $(DEPDIR)/dlgchannel.moc.P $(DEPDIR)/controlpotmeter.moc.P   .deps/controlobject.P .deps/controlpotmeter.P \
.deps/controlpushbutton.P .deps/dlgchannel.P .deps/dlgmessages.P \
.deps/dlgplaycontrol.P .deps/dlgplaylist.P .deps/engineIIRfilter.P \
.deps/enginebuffer.P .deps/engineobject.P .deps/enginepregain.P \
.deps/main.P .deps/midiobject.P .deps/mixxx.P .deps/mixxxdoc.P \
.deps/mixxxview.P .deps/player.P .deps/playeralsa.P \
.deps/playerportaudio.P .deps/soundsource.P .deps/soundsourcenull.P

SOURCES = $(mixxx_SOURCES)
OBJECTS = $(mixxx_OBJECTS)

#>- all: all-redirect
#>+ 1
all: docs-am  all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .cpp .lo .o .obj .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
#>- 	cd $(top_srcdir) && $(AUTOMAKE) --gnu mixxx/Makefile
#>+ 2
	cd $(top_srcdir) && $(AUTOMAKE) --gnu mixxx/Makefile
	cd $(top_srcdir) && perl admin/am_edit mixxx/Makefile.in

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

mixxx$(EXEEXT): $(mixxx_OBJECTS) $(mixxx_DEPENDENCIES)
	@rm -f mixxx$(EXEEXT)
	$(CXXLINK) $(mixxx_LDFLAGS) $(mixxx_OBJECTS) $(mixxx_LDADD) $(LIBS)
.cpp.o:
	$(CXXCOMPILE) -c $<
.cpp.obj:
	$(CXXCOMPILE) -c `cygpath -w $<`
.cpp.lo:
	$(LTCXXCOMPILE) -c $<

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.



all-recursive install-data-recursive install-exec-recursive \
installdirs-recursive install-recursive uninstall-recursive  \
check-recursive installcheck-recursive info-recursive dvi-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	rev=''; list='$(SUBDIRS)'; for subdir in $$list; do \
	  rev="$$subdir $$rev"; \
	  test "$$subdir" != "." || dot_seen=yes; \
	done; \
	test "$$dot_seen" = "no" && rev=". $$rev"; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
   if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
   fi; \
	done; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = mixxx

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu mixxx/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	for subdir in $(SUBDIRS); do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    chmod 777 $(distdir)/$$subdir; \
	    (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir=../$(top_distdir) distdir=../$(distdir)/$$subdir distdir) \
	      || exit 1; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp

%.o: %.cpp
	@echo '$(CXXCOMPILE) -c $<'; \
	$(CXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.cpp
	@echo '$(LTCXXCOMPILE) -c $<'; \
	$(LTCXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-recursive
dvi-am:
dvi: dvi-recursive
check-am: all-am
check: check-recursive
installcheck-am:
installcheck: installcheck-recursive
install-exec-am: install-binPROGRAMS
install-exec: install-exec-recursive

install-data-am:
install-data: install-data-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-recursive
uninstall-am: uninstall-binPROGRAMS
uninstall: uninstall-recursive
all-am: Makefile $(PROGRAMS)
all-redirect: all-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs)  $(DESTDIR)$(bindir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-binPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-recursive

#>- clean-am:  clean-binPROGRAMS clean-compile clean-libtool clean-tags \
#>- 		clean-depend clean-generic mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-final   clean-binPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

distclean-am:  distclean-binPROGRAMS distclean-compile distclean-libtool \
		distclean-tags distclean-depend distclean-generic \
		clean-am
	-rm -f libtool

distclean: distclean-recursive

maintainer-clean-am:  maintainer-clean-binPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-recursive

.PHONY: mostlyclean-binPROGRAMS distclean-binPROGRAMS clean-binPROGRAMS \
maintainer-clean-binPROGRAMS uninstall-binPROGRAMS install-binPROGRAMS \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool install-data-recursive \
uninstall-data-recursive install-exec-recursive \
uninstall-exec-recursive installdirs-recursive uninstalldirs-recursive \
all-recursive check-recursive installcheck-recursive info-recursive \
dvi-recursive mostlyclean-recursive distclean-recursive clean-recursive \
maintainer-clean-recursive tags tags-recursive mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir \
mostlyclean-depend distclean-depend clean-depend \
maintainer-clean-depend info-am info dvi-am dvi check check-am \
installcheck-am installcheck install-exec-am install-exec \
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs-am installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 41
dlgplaylistdlg.cpp: $(srcdir)/dlgplaylistdlg.ui dlgplaylistdlg.h dlgplaylistdlg.moc
	rm -f dlgplaylistdlg.cpp
	$(UIC) -i dlgplaylistdlg.h $(srcdir)/dlgplaylistdlg.ui > dlgplaylistdlg.cpp || rm -f dlgplaylistdlg.cpp
	echo '#include "dlgplaylistdlg.moc"' >> dlgplaylistdlg.cpp

dlgplaylistdlg.h: $(srcdir)/dlgplaylistdlg.ui
	$(UIC) -o dlgplaylistdlg.h $(srcdir)/dlgplaylistdlg.ui

dlgplaylistdlg.moc: dlgplaylistdlg.h
	$(MOC) dlgplaylistdlg.h -o dlgplaylistdlg.moc
dlgplaycontroldlg.cpp: $(srcdir)/dlgplaycontroldlg.ui dlgplaycontroldlg.h dlgplaycontroldlg.moc
	rm -f dlgplaycontroldlg.cpp
	$(UIC) -i dlgplaycontroldlg.h $(srcdir)/dlgplaycontroldlg.ui > dlgplaycontroldlg.cpp || rm -f dlgplaycontroldlg.cpp
	echo '#include "dlgplaycontroldlg.moc"' >> dlgplaycontroldlg.cpp

dlgplaycontroldlg.h: $(srcdir)/dlgplaycontroldlg.ui
	$(UIC) -o dlgplaycontroldlg.h $(srcdir)/dlgplaycontroldlg.ui

dlgplaycontroldlg.moc: dlgplaycontroldlg.h
	$(MOC) dlgplaycontroldlg.h -o dlgplaycontroldlg.moc
dlgmessagesdlg.cpp: $(srcdir)/dlgmessagesdlg.ui dlgmessagesdlg.h dlgmessagesdlg.moc
	rm -f dlgmessagesdlg.cpp
	$(UIC) -i dlgmessagesdlg.h $(srcdir)/dlgmessagesdlg.ui > dlgmessagesdlg.cpp || rm -f dlgmessagesdlg.cpp
	echo '#include "dlgmessagesdlg.moc"' >> dlgmessagesdlg.cpp

dlgmessagesdlg.h: $(srcdir)/dlgmessagesdlg.ui
	$(UIC) -o dlgmessagesdlg.h $(srcdir)/dlgmessagesdlg.ui

dlgmessagesdlg.moc: dlgmessagesdlg.h
	$(MOC) dlgmessagesdlg.h -o dlgmessagesdlg.moc
dlgchanneldlg.cpp: $(srcdir)/dlgchanneldlg.ui dlgchanneldlg.h dlgchanneldlg.moc
	rm -f dlgchanneldlg.cpp
	$(UIC) -i dlgchanneldlg.h $(srcdir)/dlgchanneldlg.ui > dlgchanneldlg.cpp || rm -f dlgchanneldlg.cpp
	echo '#include "dlgchanneldlg.moc"' >> dlgchanneldlg.cpp

dlgchanneldlg.h: $(srcdir)/dlgchanneldlg.ui
	$(UIC) -o dlgchanneldlg.h $(srcdir)/dlgchanneldlg.ui

dlgchanneldlg.moc: dlgchanneldlg.h
	$(MOC) dlgchanneldlg.h -o dlgchanneldlg.moc

#>+ 3
mixxxview.moc.cpp: $(srcdir)/mixxxview.h
	$(MOC) $(srcdir)/mixxxview.h -o mixxxview.moc.cpp

#>+ 3
enginebuffer.moc.cpp: $(srcdir)/enginebuffer.h
	$(MOC) $(srcdir)/enginebuffer.h -o enginebuffer.moc.cpp

#>+ 3
controlpushbutton.moc.cpp: $(srcdir)/controlpushbutton.h
	$(MOC) $(srcdir)/controlpushbutton.h -o controlpushbutton.moc.cpp

#>+ 3
enginepregain.moc.cpp: $(srcdir)/enginepregain.h
	$(MOC) $(srcdir)/enginepregain.h -o enginepregain.moc.cpp

#>+ 3
dlgplaylist.moc.cpp: $(srcdir)/dlgplaylist.h
	$(MOC) $(srcdir)/dlgplaylist.h -o dlgplaylist.moc.cpp

#>+ 3
dlgplaycontrol.moc.cpp: $(srcdir)/dlgplaycontrol.h
	$(MOC) $(srcdir)/dlgplaycontrol.h -o dlgplaycontrol.moc.cpp

#>+ 3
mixxx.moc.cpp: $(srcdir)/mixxx.h
	$(MOC) $(srcdir)/mixxx.h -o mixxx.moc.cpp

#>+ 3
mixxxdoc.moc.cpp: $(srcdir)/mixxxdoc.h
	$(MOC) $(srcdir)/mixxxdoc.h -o mixxxdoc.moc.cpp

#>+ 3
dlgmessages.moc.cpp: $(srcdir)/dlgmessages.h
	$(MOC) $(srcdir)/dlgmessages.h -o dlgmessages.moc.cpp

#>+ 3
controlobject.moc.cpp: $(srcdir)/controlobject.h
	$(MOC) $(srcdir)/controlobject.h -o controlobject.moc.cpp

#>+ 3
engineobject.moc.cpp: $(srcdir)/engineobject.h
	$(MOC) $(srcdir)/engineobject.h -o engineobject.moc.cpp

#>+ 3
dlgchannel.moc.cpp: $(srcdir)/dlgchannel.h
	$(MOC) $(srcdir)/dlgchannel.h -o dlgchannel.moc.cpp

#>+ 3
controlpotmeter.moc.cpp: $(srcdir)/controlpotmeter.h
	$(MOC) $(srcdir)/controlpotmeter.h -o controlpotmeter.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  mixxxview.moc.cpp enginebuffer.moc.cpp controlpushbutton.moc.cpp enginepregain.moc.cpp dlgplaylist.moc.cpp dlgplaycontrol.moc.cpp mixxx.moc.cpp mixxxdoc.moc.cpp dlgmessages.moc.cpp controlobject.moc.cpp engineobject.moc.cpp dlgchannel.moc.cpp controlpotmeter.moc.cpp

#>+ 7
clean-ui:
	-rm -f \
	dlgplaylistdlg.cpp dlgplaylistdlg.h dlgplaylistdlg.moc \
	dlgplaycontroldlg.cpp dlgplaycontroldlg.h dlgplaycontroldlg.moc \
	dlgmessagesdlg.cpp dlgmessagesdlg.h dlgmessagesdlg.moc \
	dlgchanneldlg.cpp dlgchanneldlg.h dlgchanneldlg.moc 

#>+ 2
docs-am:

#>+ 5
force-reedit:
		cd $(top_srcdir) && $(AUTOMAKE) --gnu mixxx/Makefile
	cd $(top_srcdir) && perl admin/am_edit mixxx/Makefile.in


#>+ 11
mixxx.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/soundsourcenull.cpp $(srcdir)/dlgplaylist.cpp $(srcdir)/enginepregain.cpp $(srcdir)/engineIIRfilter.cpp $(srcdir)/midiobject.cpp $(srcdir)/playerportaudio.cpp $(srcdir)/playeralsa.cpp $(srcdir)/controlpotmeter.cpp $(srcdir)/player.cpp $(srcdir)/enginebuffer.cpp $(srcdir)/controlpushbutton.cpp $(srcdir)/engineobject.cpp $(srcdir)/controlobject.cpp $(srcdir)/soundsource.cpp $(srcdir)/dlgplaycontrol.cpp $(srcdir)/dlgmessages.cpp $(srcdir)/dlgchannel.cpp $(srcdir)/mixxxview.cpp $(srcdir)/mixxxdoc.cpp $(srcdir)/mixxx.cpp $(srcdir)/main.cpp dlgplaylistdlg.cpp dlgplaycontroldlg.cpp dlgmessagesdlg.cpp dlgchanneldlg.cpp  mixxxview.moc.cpp enginebuffer.moc.cpp controlpushbutton.moc.cpp enginepregain.moc.cpp dlgplaylist.moc.cpp dlgplaycontrol.moc.cpp mixxx.moc.cpp mixxxdoc.moc.cpp dlgmessages.moc.cpp controlobject.moc.cpp engineobject.moc.cpp dlgchannel.moc.cpp controlpotmeter.moc.cpp
	@echo 'creating mixxx.all_cpp.cpp ...'; \
	rm -f mixxx.all_cpp.files mixxx.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> mixxx.all_cpp.final; \
	for file in soundsourcenull.cpp dlgplaylist.cpp enginepregain.cpp engineIIRfilter.cpp midiobject.cpp playerportaudio.cpp playeralsa.cpp controlpotmeter.cpp player.cpp enginebuffer.cpp controlpushbutton.cpp engineobject.cpp controlobject.cpp soundsource.cpp dlgplaycontrol.cpp dlgmessages.cpp dlgchannel.cpp mixxxview.cpp mixxxdoc.cpp mixxx.cpp main.cpp dlgplaylistdlg.cpp dlgplaycontroldlg.cpp dlgmessagesdlg.cpp dlgchanneldlg.cpp  mixxxview.moc.cpp enginebuffer.moc.cpp controlpushbutton.moc.cpp enginepregain.moc.cpp dlgplaylist.moc.cpp dlgplaycontrol.moc.cpp mixxx.moc.cpp mixxxdoc.moc.cpp dlgmessages.moc.cpp controlobject.moc.cpp engineobject.moc.cpp dlgchannel.moc.cpp controlpotmeter.moc.cpp; do \
	  echo "#include \"$$file\"" >> mixxx.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> mixxx.all_cpp.final; \
	done; \
	cat mixxx.all_cpp.final mixxx.all_cpp.files  > mixxx.all_cpp.cpp; \
	rm -f mixxx.all_cpp.final mixxx.all_cpp.files

#>+ 3
clean-final:
	-rm -f mixxx.all_cpp.cpp

#>+ 2
final:
	$(MAKE) mixxx_OBJECTS="$(mixxx_final_OBJECTS)" all-am
#>+ 2
final-install:
	$(MAKE) mixxx_OBJECTS="$(mixxx_final_OBJECTS)" install-am
#>+ 2
no-final:
	$(MAKE) mixxx_OBJECTS="$(mixxx_nofinal_OBJECTS)" all-am
#>+ 2
no-final-install:
	$(MAKE) mixxx_OBJECTS="$(mixxx_nofinal_OBJECTS)" install-am
#>+ 3
cvs-clean:
	$(MAKE) -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 22
$(srcdir)/controlpotmeter.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/controlobject.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/dlgchannel.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/midiobject.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/mixxxdoc.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/dlgplaylist.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/main.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/engineIIRfilter.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/enginebuffer.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/mixxxview.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/dlgplaycontrol.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/playerportaudio.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/soundsource.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/dlgmessages.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/playeralsa.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/soundsourcenull.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/player.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/controlpushbutton.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/enginepregain.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/engineobject.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
$(srcdir)/mixxx.cpp: dlgplaylistdlg.h dlgplaycontroldlg.h dlgmessagesdlg.h dlgchanneldlg.h 
